{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Bureau\\\\Projet\\\\Bilan-Carbone\\\\client\\\\src\\\\components\\\\Statistique\\\\Annuel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chart, LineController, LineElement, PointElement, LinearScale, Title, CategoryScale } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(LineController, LineElement, PointElement, LinearScale, Title, CategoryScale);\nconst CustomLineYearChart = ({\n  specialite\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const chartRef = useRef(null);\n  const testStatistics = [{\n    name: 'Test Statistique 1',\n    mode: 'Normal',\n    score: '75',\n    date: new Date('2024-01-15'),\n    promo: 'ING INFO'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '75',\n    date: new Date('2025-02-15'),\n    promo: 'ING ENER'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '95',\n    date: new Date('2024-03-15'),\n    promo: 'ING INFO'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2023-04-15'),\n    promo: 'ING TELECOM'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '25',\n    date: new Date('2024-05-15'),\n    promo: 'ING INSTRU'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '105',\n    date: new Date('2025-06-15'),\n    promo: 'ING MACS'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '45',\n    date: new Date('2023-07-15'),\n    promo: 'ING INFO'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-08-15'),\n    promo: 'ING ENER'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '95',\n    date: new Date('2025-09-15'),\n    promo: 'ING INSTRU'\n  }];\n  const filteredStatistics = specialite === 'default' || specialite === 'all' ? testStatistics : testStatistics.filter(stat => stat.promo === specialite);\n  // Regrouper et calculer la moyenne par année\n  const groupByYear = stats => {\n    const sums = {};\n    const counts = {};\n    stats.forEach(stat => {\n      const year = stat.date.getFullYear();\n      if (!sums[year]) {\n        sums[year] = 0;\n        counts[year] = 0;\n      }\n      sums[year] += Number(stat.score);\n      counts[year]++;\n    });\n    return Object.keys(sums).map(year => ({\n      year,\n      averageScore: sums[year] / counts[year]\n    }));\n  };\n  useEffect(() => {\n    // Groupe les données filtrées par année et calcule la moyenne\n    const groupedData = groupByYear(filteredStatistics);\n    setChartData({\n      labels: groupedData.map(data => data.year),\n      datasets: [{\n        label: `Moyenne des scores par année ${specialite !== 'default' && specialite !== 'all' ? '- ' + specialite : ''}`,\n        data: groupedData.map(data => data.averageScore),\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }]\n    });\n  }, [specialite]); // Inclure specialite dans les dépendances de l'effet\n\n  useEffect(() => {\n    if (chartRef.current && chartData.labels) {\n      const chartContext = chartRef.current.getContext('2d');\n      const lineChart = new Chart(chartContext, {\n        type: 'line',\n        data: chartData\n      });\n      return () => lineChart.destroy();\n    }\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomLineYearChart, \"/NBcMNa+o5oX9+iKKfIFolN3Kqs=\");\n_c = CustomLineYearChart;\nexport default CustomLineYearChart;\nvar _c;\n$RefreshReg$(_c, \"CustomLineYearChart\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","LineController","LineElement","PointElement","LinearScale","Title","CategoryScale","jsxDEV","_jsxDEV","register","CustomLineYearChart","specialite","_s","chartData","setChartData","chartRef","testStatistics","name","mode","score","date","Date","promo","filteredStatistics","filter","stat","groupByYear","stats","sums","counts","forEach","year","getFullYear","Number","Object","keys","map","averageScore","groupedData","labels","data","datasets","label","fill","borderColor","tension","current","chartContext","getContext","lineChart","type","destroy","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Bureau/Projet/Bilan-Carbone/client/src/components/Statistique/Annuel.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Chart, LineController, LineElement, PointElement, LinearScale, Title, CategoryScale } from 'chart.js';\r\n\r\nChart.register(LineController, LineElement, PointElement, LinearScale, Title, CategoryScale);\r\n\r\nconst CustomLineYearChart = ({ specialite }) => {\r\n  const [chartData, setChartData] = useState({});\r\n  const chartRef = useRef(null);\r\n\r\n  const testStatistics = [\r\n    {\r\n      name: 'Test Statistique 1',\r\n      mode: 'Normal',\r\n      score: '75',\r\n      date: new Date('2024-01-15'),\r\n      promo: 'ING INFO'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '75',\r\n      date: new Date('2025-02-15'),\r\n      promo: 'ING ENER'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '95',\r\n      date: new Date('2024-03-15'),\r\n      promo: 'ING INFO'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2023-04-15'),\r\n      promo: 'ING TELECOM'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '25',\r\n      date: new Date('2024-05-15'),\r\n      promo: 'ING INSTRU'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '105',\r\n      date: new Date('2025-06-15'),\r\n      promo: 'ING MACS'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '45',\r\n      date: new Date('2023-07-15'),\r\n      promo: 'ING INFO'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-08-15'),\r\n      promo: 'ING ENER'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '95',\r\n      date: new Date('2025-09-15'),\r\n      promo: 'ING INSTRU'\r\n    }\r\n  ];\r\n  const filteredStatistics = specialite === 'default' || specialite === 'all'\r\n  ? testStatistics \r\n  : testStatistics.filter(stat => stat.promo === specialite);\r\n  // Regrouper et calculer la moyenne par année\r\n  const groupByYear = (stats) => {\r\n    const sums = {};\r\n    const counts = {};\r\n    stats.forEach(stat => {\r\n      const year = stat.date.getFullYear();\r\n      if (!sums[year]) {\r\n        sums[year] = 0;\r\n        counts[year] = 0;\r\n      }\r\n      sums[year] += Number(stat.score);\r\n      counts[year]++;\r\n    });\r\n    return Object.keys(sums).map(year => ({\r\n      year,\r\n      averageScore: sums[year] / counts[year]\r\n    }));\r\n  };\r\n  useEffect(() => {\r\n    // Groupe les données filtrées par année et calcule la moyenne\r\n    const groupedData = groupByYear(filteredStatistics);\r\n\r\n    setChartData({\r\n      labels: groupedData.map(data => data.year),\r\n      datasets: [{\r\n        label: `Moyenne des scores par année ${specialite !== 'default' && specialite !== 'all' ? '- ' + specialite : ''}`,\r\n        data: groupedData.map(data => data.averageScore),\r\n        fill: false,\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        tension: 0.1\r\n      }]\r\n    });\r\n  }, [specialite]); // Inclure specialite dans les dépendances de l'effet\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current && chartData.labels) {\r\n      const chartContext = chartRef.current.getContext('2d');\r\n      const lineChart = new Chart(chartContext, {\r\n        type: 'line',\r\n        data: chartData,\r\n      });\r\n\r\n      return () => lineChart.destroy();\r\n    }\r\n  }, [chartData]);\r\n  return (\r\n    <div>\r\n      <canvas ref={chartRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default CustomLineYearChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}