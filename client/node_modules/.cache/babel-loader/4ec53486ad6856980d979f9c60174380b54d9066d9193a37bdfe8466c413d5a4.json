{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Bureau\\\\Projet\\\\Bilan-Carbone\\\\client\\\\src\\\\components\\\\Statistique\\\\Mensuel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chart, LineController, LineElement, PointElement, LinearScale, Title, CategoryScale } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(LineController, LineElement, PointElement, LinearScale, Title, CategoryScale);\nconst CustomLineChart = ({\n  specialite\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const chartRef = useRef(null);\n  const testStatistics = [{\n    name: 'Test Statistique 1',\n    mode: 'Normal',\n    score: '75',\n    date: new Date('2024-01-15'),\n    promo: 'ING INFO'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-02-15'),\n    promo: 'ING ENER'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '95',\n    date: new Date('2024-03-15'),\n    promo: 'ING INFO'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-04-15'),\n    promo: 'ING TELECOM'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-05-15'),\n    promo: 'ING INSTRU'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-06-15'),\n    promo: 'ING MACS'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-07-15'),\n    promo: 'ING INFO'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-08-15'),\n    promo: 'ING ENER'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-09-15'),\n    promo: 'ING INSTRU'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-10-15'),\n    promo: 'ING TELECOM'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-11-15'),\n    promo: 'ING MACS'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-12-15'),\n    promo: 'ING ENER'\n  }, {\n    name: 'Test Statistique 2',\n    mode: 'Normal',\n    score: '85',\n    date: new Date('2024-02-15'),\n    promo: 'ING INFO'\n  }];\n  const groupByMonth = stats => {\n    const groupedData = {};\n    stats.forEach(stat => {\n      const month = `${stat.date.getFullYear()}-${stat.date.getMonth() + 1}`;\n      if (!groupedData[month]) {\n        groupedData[month] = {\n          totalScore: 0,\n          count: 0\n        };\n      }\n      groupedData[month].totalScore += Number(stat.score);\n      groupedData[month].count += 1;\n    });\n    return Object.entries(groupedData).map(([month, data]) => {\n      return {\n        month,\n        averageScore: data.totalScore / data.count\n      };\n    });\n  };\n  useEffect(() => {\n    const filteredData = specialite === \"default\" ? testStatistics // Si \"default\", utilisez toutes les données\n    : testStatistics.filter(stat => stat.promo === specialite);\n    const monthlyData = groupByMonth(filteredData);\n    setChartData({\n      labels: monthlyData.map(data => data.month),\n      datasets: [{\n        label: 'Score mensuel moyen',\n        data: monthlyData.map(data => data.averageScore),\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }]\n    });\n  }, [specialite]);\n  useEffect(() => {\n    var _chartData$datasets;\n    if (chartRef.current && ((_chartData$datasets = chartData.datasets) === null || _chartData$datasets === void 0 ? void 0 : _chartData$datasets.length) > 0) {\n      const chartContext = chartRef.current.getContext('2d');\n      const lineChart = new Chart(chartContext, {\n        type: 'line',\n        data: chartData\n      });\n      return () => lineChart.destroy();\n    }\n  }, [chartData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 10\n  }, this);\n};\n_s(CustomLineChart, \"/NBcMNa+o5oX9+iKKfIFolN3Kqs=\");\n_c = CustomLineChart;\nexport default CustomLineChart;\nvar _c;\n$RefreshReg$(_c, \"CustomLineChart\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Chart","LineController","LineElement","PointElement","LinearScale","Title","CategoryScale","jsxDEV","_jsxDEV","register","CustomLineChart","specialite","_s","chartData","setChartData","chartRef","testStatistics","name","mode","score","date","Date","promo","groupByMonth","stats","groupedData","forEach","stat","month","getFullYear","getMonth","totalScore","count","Number","Object","entries","map","data","averageScore","filteredData","filter","monthlyData","labels","datasets","label","fill","borderColor","tension","_chartData$datasets","current","length","chartContext","getContext","lineChart","type","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Bureau/Projet/Bilan-Carbone/client/src/components/Statistique/Mensuel.jsx"],"sourcesContent":["\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Chart, LineController, LineElement, PointElement, LinearScale, Title, CategoryScale } from 'chart.js';\r\n\r\nChart.register(LineController, LineElement, PointElement, LinearScale, Title, CategoryScale);\r\n\r\nconst CustomLineChart = ({ specialite }) => {\r\n  const [chartData, setChartData] = useState({});\r\n  const chartRef = useRef(null);\r\n\r\n  const testStatistics = [\r\n    {\r\n      name: 'Test Statistique 1',\r\n      mode: 'Normal',\r\n      score: '75',\r\n      date: new Date('2024-01-15'),\r\n      promo: 'ING INFO'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-02-15'),\r\n      promo: 'ING ENER'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '95',\r\n      date: new Date('2024-03-15'),\r\n      promo: 'ING INFO'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-04-15'),\r\n      promo: 'ING TELECOM'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-05-15'),\r\n      promo: 'ING INSTRU'\r\n    },\r\n    {\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-06-15'),\r\n      promo: 'ING MACS'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-07-15'),\r\n      promo: 'ING INFO'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-08-15'),\r\n      promo: 'ING ENER'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-09-15'),\r\n      promo: 'ING INSTRU'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-10-15'),\r\n      promo: 'ING TELECOM'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-11-15'),\r\n      promo: 'ING MACS'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-12-15'),\r\n      promo: 'ING ENER'\r\n    },{\r\n      name: 'Test Statistique 2',\r\n      mode: 'Normal',\r\n      score: '85',\r\n      date: new Date('2024-02-15'),\r\n      promo: 'ING INFO'\r\n    }\r\n  ];\r\n\r\n  const groupByMonth = (stats) => {\r\n    const groupedData = {};\r\n\r\n    stats.forEach(stat => {\r\n      const month = `${stat.date.getFullYear()}-${stat.date.getMonth() + 1}`;\r\n      if (!groupedData[month]) {\r\n        groupedData[month] = { totalScore: 0, count: 0 };\r\n      }\r\n      groupedData[month].totalScore += Number(stat.score);\r\n      groupedData[month].count += 1;\r\n    });\r\n\r\n    return Object.entries(groupedData).map(([month, data]) => {\r\n      return {\r\n        month,\r\n        averageScore: data.totalScore / data.count\r\n      };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const filteredData = specialite === \"default\"\r\n      ? testStatistics // Si \"default\", utilisez toutes les données\r\n      : testStatistics.filter(stat => stat.promo === specialite);\r\n\r\n    const monthlyData = groupByMonth(filteredData);\r\n\r\n    setChartData({\r\n      labels: monthlyData.map(data => data.month),\r\n      datasets: [{\r\n        label: 'Score mensuel moyen',\r\n        data: monthlyData.map(data => data.averageScore),\r\n        fill: false,\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        tension: 0.1\r\n      }]\r\n    });\r\n  }, [specialite]);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current && chartData.datasets?.length > 0) {\r\n      const chartContext = chartRef.current.getContext('2d');\r\n      const lineChart = new Chart(chartContext, {\r\n        type: 'line',\r\n        data: chartData,\r\n      });\r\n  \r\n      return () => lineChart.destroy();\r\n    }\r\n  }, [chartData]);\r\n\r\n  return <canvas ref={chartRef} />;\r\n};\r\n\r\nexport default CustomLineChart;\r\n\r\n  \r\n "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}